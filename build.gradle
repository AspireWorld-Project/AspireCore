import org.ultramine.gradle.task.*

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

compileJava.options.encoding = 'UTF-8'
if(compile_incremental == "true")
	compileJava.options.incremental = true

ext.commit = null
ext.previousCommit = null
ext.versionFile = null
ext.revision = 0
group = project_group
version = (concat_mc_version_to=='version' ? (minecraft_version+'-') : '')

repositories {
	maven {
		name 'forge'
        url = 'https://maven.minecraftforge.net'
	}
	mavenCentral()
	maven {
		name 'sonatypeSnapshot'
		url 'https://oss.sonatype.org/content/repositories/snapshots/'
	}
	maven {
		name 'minecraft'
		url 'https://libraries.minecraft.net/'
	}
	maven {
		name = 'sponge'
		url = 'https://repo.spongepowered.org/maven'
	}
	maven { url 'https://maven.sk89q.com/repo/' }
	maven { url 'https://maven.elmakers.com/repository/' }
}

configurations {
	compileCommon
	compileClient
	compileServer
	runtimeCommon
	runtimeClient
	runtimeServer
	compile.extendsFrom compileCommon, compileClient, compileServer
	packageClient.extendsFrom compileCommon, compileClient, runtimeCommon, runtimeClient
	packageServer.extendsFrom compileCommon, compileServer, runtimeCommon, runtimeServer
	packageAll.extendsFrom compileCommon, compileClient, compileServer, runtimeCommon, runtimeClient, runtimeServer
	runtime.setExtendsFrom([packageAll])
	//packageClient, packageServer & packageAll is not linking to IDE and must not be used for adding dependencies
}

dependencies {
	compileCommon 'net.minecraft:launchwrapper:1.11'
	compileCommon 'com.google.code.findbugs:jsr305:1.3.9'
	compileCommon 'org.ow2.asm:asm-debug-all:5.0.3'
	compileCommon 'com.typesafe.akka:akka-actor_2.11:2.3.3'
	compileCommon 'com.typesafe:config:1.2.1'
	compileCommon 'org.scala-lang:scala-actors-migration_2.11:1.1.0'
	compileCommon 'org.scala-lang:scala-compiler:2.11.1'
	compileCommon 'org.scala-lang.plugins:scala-continuations-library_2.11:1.0.2'
	compileCommon 'org.scala-lang.plugins:scala-continuations-plugin_2.11.1:1.0.2'
	compileCommon 'org.scala-lang:scala-library:2.11.1'
	compileCommon 'org.scala-lang:scala-parser-combinators:2.11.0-M4'
	compileCommon 'org.scala-lang:scala-reflect:2.11.1'
	compileCommon 'org.scala-lang:scala-swing:2.11.0-M4'
	compileCommon 'org.scala-lang:scala-xml:2.11.0-M4'
	compileCommon 'net.sf.jopt-simple:jopt-simple:4.5'
	compileCommon 'lzma:lzma:0.0.1'
	compileClient 'com.mojang:realms:1.3.5'
	compileCommon 'org.apache.commons:commons-compress:1.8.1'
	compileCommon 'org.apache.httpcomponents:httpclient:4.3.3'
	compileCommon 'commons-logging:commons-logging:1.1.3'
	compileCommon 'org.apache.httpcomponents:httpcore:4.3.2'
	compileCommon 'java3d:vecmath:1.3.1'
	compileCommon 'net.sf.trove4j:trove4j:3.0.3'
	compileCommon 'com.ibm.icu:icu4j-core-mojang:51.2'
	compileClient 'com.paulscode:codecjorbis:20101023'
	compileClient 'com.paulscode:codecwav:20101023'
	compileClient 'com.paulscode:libraryjavasound:20101123'
	compileClient 'com.paulscode:librarylwjglopenal:20100824'
	compileClient 'com.paulscode:soundsystem:20120107'
	compileCommon 'io.netty:netty-all:4.0.10.Final'
	compileCommon 'com.google.guava:guava:17.0'
	compileCommon 'org.apache.commons:commons-lang3:3.3.2'
	compileCommon 'commons-io:commons-io:2.4'
	compileCommon 'commons-codec:commons-codec:1.9'
	compileClient 'net.java.jinput:jinput:2.0.5'
	compileClient 'net.java.jutils:jutils:1.0.0'
	compileCommon 'com.google.code.gson:gson:2.2.4'
	compileCommon 'com.mojang:authlib:1.5.16'
	compileCommon 'org.apache.logging.log4j:log4j-api:2.0-beta9'
	compileCommon 'org.apache.logging.log4j:log4j-core:2.0-beta9'
	compileClient 'org.lwjgl.lwjgl:lwjgl:2.9.1'
	compileClient 'org.lwjgl.lwjgl:lwjgl_util:2.9.1'
	compileClient 'tv.twitch:twitch:5.16'
	compileCommon 'org.yaml:snakeyaml:1.16'
	compileCommon 'com.lmax:disruptor:3.2.1'
	compileCommon 'org.apache.commons:commons-dbcp2:2.1.1'
	compileCommon 'net.openhft:koloboke-api-jdk8:0.6.8'
	compileServer 'jline:jline:2.13'
	runtimeServer group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
	runtimeCommon 'net.openhft:koloboke-impl-jdk8:0.6.8'
	runtimeCommon 'mysql:mysql-connector-java:5.1.14'
	compileCommon 'commons-lang:commons-lang:2.6'
	compileServer 'org.avaje:ebean:2.7.7'
	compileServer('net.md-5:SpecialSource:1.7.4') {
		exclude module: 'guava'
		exclude module: 'jopt-simple'
		exclude module: 'asm-debug-all'
	}

	runtimeServer files('lib/guava-10-remapped.jar')
	runtimeServer('com.googlecode.json-simple:json-simple:1.1.1') {
		exclude module: 'junit'
	}
	runtimeServer 'org.xerial:sqlite-jdbc:3.18.0'
	compileOnly ('net.milkbowl.vault:VaultAPI:1.6') { transitive = false  }
}

task injectVersion(type: SpeicialClassTransformTask) {
	dependsOn tasks.compileJava
	inputDir = tasks.compileJava.destinationDir
	replace {
		replaceIn 'org.ultramine.server.UltramineServerModContainer'
		replace '@version@', version
	}
}

task reobf(type: ReobfTask) {
	dependsOn tasks.compileJava, tasks.injectVersion
	classpath = sourceSets.main.compileClasspath;
	addSrg('conf/mcp2notch.srg')
	addSrg('conf/bukkit.srg')
	inputDir = tasks.compileJava.destinationDir
	overrideInputDir = tasks.injectVersion.outputDir
}

task sidesplit(type: SideSplitTask) {
	dependsOn tasks.reobf
	inputDir = tasks.reobf.outputDir
}

task processServerResources(type: ProcessResources) {
	from sourceSets.main.resources.srcDirs
	into new File(buildDir, 'resources_server')
	exclude 'assets/minecraft/font'
	exclude 'assets/minecraft/shaders'
	exclude 'assets/minecraft/texts'
	exclude 'assets/minecraft/textures'
	exclude 'assets/fml/textures'
}

task processClientResources(type: ProcessResources) {
	from sourceSets.main.resources.srcDirs
	into new File(buildDir, 'resources_client')
	exclude 'org/ultramine/defaults'
}

task jar_server(type: Jar) {
	dependsOn(tasks.sidesplit, tasks.processServerResources)
	from fileTree(tasks.sidesplit.getServerClasses()), tasks.processServerResources
	classifier = 'server'
	manifest {
		attributes(
			'Main-Class': 'cpw.mods.fml.relauncher.ServerLaunchWrapper',
			'TweakClass': 'cpw.mods.fml.common.launcher.FMLTweaker',
			'Class-Path': configurations.packageServer.collect { 'libraries/' + it.getName() }.join(' ')
		)
	}
}

task jar_client(type: Jar) {
	dependsOn(tasks.sidesplit, tasks.processClientResources)
	from fileTree(tasks.sidesplit.getClientClasses()), tasks.processClientResources
	classifier = 'client'
}

task jar_universal(type: Jar) {
	dependsOn(tasks.reobf, tasks.processResources)
	from tasks.reobf.getOutputDir(), tasks.processResources
	classifier = 'universal'
}

jar {
	classifier = 'dev'
}

task jar_source(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

artifacts {
	if(produce_universal_jar == 'true')	archives jar_universal
	if(produce_server_jar == 'true')	archives jar_server
	if(produce_client_jar == 'true')	archives jar_client
}

task dumpLibs(type: Copy) {
	into "$buildDir/libs/libraries"
	from configurations.runtime
}

tasks.build.dependsOn tasks.dumpLibs

defaultTasks 'build'